
What the language tries to achieve:
* C++ without the excessive keywords
    * constexpr by default
    * const by default
    * optionally mutable
    * no exceptions (no exceptions)

* C++ without the standard library
    * the most fundamentally desired types builtin:
        * array
        * tuple
        * span
        * variant
        * optional
        * expected

    * small standard utilities
        * box          // unique_ptr
        * rc_box       // shared_ptr
        * arc_box      // atomic shared_ptr
        * weak         // weak_ptr
        * mutex
        * semaphore

    * small standard containers
        * vector
        * string
        * map

* take the good parts from haskell without the heap

* two distinct distribution methods: modules and libraries
    * shared libraries are your standard c/c++ out of line, exported code. Provides a shared object that can be interfaces with the standard ABI, from C or C++, or any other langauge that can interface with such native objects. Only used for shared libraries.
    * modules are embedded representations of the AST that allows for templates to be redistributed without header files. It also allows embedding of pre-compiled objects to aid in compilation and linking time. This essentially replaces the static library.

* header files can optionally be exported but are not needed for the compilation process. They solely are there to expose the programmer to the API in a human-readable way without the need of a LSP.

* no coroutine support, at least not yet. implicit heap is bad.

* there is no memory safety guarantee, but well written code should avoid it well. There should be an optional "safe-mode" similar to the Fil-C implementation of C/C++.

* memory dynamically allocated at compile time that is not destructed turns into static memory.

* incremental builds should be supported by some AST caching mechanism. dependency graphs should avoid reevaluation of time-consuming compile-time evaluations.

* explicit constructors and operator(type) by default.
    * seriously considering not allowing implicit at all, or at least having a warning whenever an implicit conversion happens.

* excellent metaprogramming through syntax instead of resorting to compiler instrinsics such as __builtin_derives_from etc.

* pattern matching function signatures by utilising variant / optional as monads. 
    (essentially implementing a std::visit visitor lambda in the global scope.)

* pattern matching function arguments by value 

* primaries: u8, u16, u32, u64, f32, f64, i8, i16, i32, i64, char (alias char8), char16, char32

* templates do not require "template" and "typename" but requires type qualification (or auto) when value passed.

* concept

    concept Unsigned<T> requires (T == u32 | u16 | u8 )

* function declaration

    fn factorial :: (Unsigned) -> Unsigned;
    fn add :: (Unsigned, Unsigned) -> Unsigned;

* functional function definition

    fn factorial 1 = 1
    fn factorial a = a * factorial(a - 1);

    fn factorial a = match a {
        1 => 1;
        _ => a * factorial(a - 1);
    };

    fn add a b = a + b;
    fn add Unsigned a Unsigned b = a + b;

* "normal" imperative function definition

    fn add(Unsigned a, Unsigned b) -> int {
        a + b // (optional return)
    }

* if / for / while without braces

    if true { ... }

* reference by default, move / copy with keyword. perfect forwarding with keyword. doesn't apply to primitives

    auto vec = vector{ 1, 2, 3 };

    some_other_system.set_cache(move vec);
    some_other_system.set_cache(copy vec);

    // in some other system

    set_cache :: (forward vector<int> v) {
        self.vector = v;
    }

* types can be annotated by prefer_copy to be passed by value automatically. useful for something like string_view or other small register-friendly types.

    struct string_view prefer_copy
    {
        const char* ptr;
        u32 size;
    }

* constructors can have names.

    struct test
    {
        construct from_int(int num) { self.num = num; }
        construct from_int(int num) { self.num = num; }

        int num;
    };

    * lingering on constructors, c++ has a massive problem with wrapping structures and forwarding constructors to constructi in-place. std::optional and std::expected are full of footguns because of this. If you've used the features before, you've probably done at least an unintented move, and lots of memcpy, meaning the speedup RVO was supposed to give you was lost anyway.

    Consider the following example:

    struct thing
    {
        int a;
        int b;
        int c;

        thing(int a, int b, int c) : a(a), b(b), c(c) {};
        thing(thing&& other);
    };

    std::optional<thing> make_thing()
    {
        return thing{ 1, 2, 3 };
    }

    * here you are almost certainly invoking the move constructor to move the new temporary 'thing' the RVO optional. (assuming the compiler doesn't inline the function and optimize it away.)

    * if your struct is trivial this might not be a problem (because the copy can be optimized away), but if you have any copy/move constructors defined (or implicitly declared by having non-trivial members), it will certainly become a problem.

    * you can fix this by calling the in_place constructor (which is almost certainly what you wanted to do, and thought would happen), or the boilerplate std::make_optional function.

    std::optional<thing> make_thing()
    {
        // 1:
        return std::optional<thing>{ std::in_place_t{}, 1, 2, 3 };

        // 2:
        return std::make_optional<thing>(1, 2, 3);
    }
    
    * this is obviously ridiculous, and gets even worse when you consider the std::expected case, because you have to forward differently for expected vs unexpected outcomes. Also, if you layer this on top of each other, for example by having an optional inside an expected case (yes i know very contrived), then you will get code like this:

    std::expected<std::optional<std::string>, int> make_thing(bool good)
    {
        if (good)
            return std::expected{ std::in_place_t{}, std::in_place_t{}, "good" };

        return std::expected{ std::unexpect_t{}, 2 };
    }
    

    * Now, this is already fixed in my language by 1. having them as langauge features, and 2. having explicit forwarding of references by the keywords move/copy, removing the footguns, and 3. not allowing implicit by default

    * but it's still lacking an intuitive way of understanding exactly what happens. There needs to be a better way of doing this for custom types.

    * Let's try making our own version, utilizing the optional language-construct for simplicity.

    struct optional<T>
    {
        implicit construct (construct T t) // could also be "forward T t"
        {
            impl = forward t;
        }
        
        fn _has_value T a = true
        fn _has_value None _ = false

        fn has_value = _has_value(impl);

        T? impl;
    }

    * we invented a new kind of reference that takes forwards the construct call inside the impl. 

    * Also, since optional is implemented as a variant of T and the None-type, we're able to pattern match by the type of the implementation at run-time. 

* no deducing this needed: code adapts to reference qualifiers.

* reference lifetimes like Rust

* references can not be converted to move references. only owned values can be moved.
    * can we optimize so that we only move once?
        * yes, by introducing good apis 

    struct database<T>
    {
        vector<T> objects;
    }

    struct thing
    {
        u32 a, b;
    }
 
    database<thing> database_1;
    database<thing> database_2;
 
    fn main()
    {
        for [i, obj] : database_1.objects.reverse_iter() {
            if !is_object_we_are_looking_for
                continue;

            database_1.objects.move_and_swap(i, [database_2](forward element){
                database_2.insert(forward element);
            });
        }
    }

* no borrow checking (kinda):
    * if a thing is mutable, it's mutable forever.
    * if a thing is immutable, it's immutable forever, like in c++. (without const_cast)

    * in c++, if you know that an object is not const when it's defined, you're allowed to const_cast away a const. not in a++.

    * you can still mess up your threading. You can use mutex types to be safe against this, with big overhead, of course.

    * move references MUST take over the object that is being moved. Aka it must forward it to an assignment or some other call. It must happen in all branches. Alternatively it can be assigned to a stack variable, and then further moved or deleted at the end of the scope.

* built-in type safe union: variant

    variant SomeType = TypeA | TypeB | TypeC;
